using System.Runtime.InteropServices;
using Infrastructure.Environment.Windows.Common.User32.Interfaces;
using Infrastructure.Environment.Windows.Common.User32.NativeTypes.Enums;

namespace Infrastructure.Environment.Windows.Common.User32;

/// <summary>
/// Import hot key methods from user32.dll
/// </summary>
internal sealed class HotKeyService : IHotKeyService
{
    /// <summary>
    /// Defines a system-wide hot key.
    /// </summary>
    /// <param name="hWnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
    /// <param name="id">The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see Remarks for the action taken.</param>
    /// <param name="fsModifiers">The keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.</param>
    /// <param name="vlc">The virtual-key code of the hot key. See <see href="https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes">Virtual Key Codes.</see></param>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
    public bool RegisterHotKeyToHandle(nint hWnd, int id, FsModifiers fsModifiers, uint vlc)
    {
        return RegisterHotKey(hWnd, id, fsModifiers, vlc);
    }

    /// <summary>
    /// Frees a hot key previously registered by the calling thread.
    /// </summary>
    /// <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.</param>
    /// <param name="id">The identifier of the hot key to be freed.</param>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    public bool UnregisterHotKeyFromHandle(nint hWnd, int id)
    {
        return UnregisterHotKey(hWnd, id);
    }

    #region Native Methods

    #pragma warning disable CA5392 // Disable warning. User32 is a common dll and is intended to be suppressed. https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca5392
    /// <summary>
    /// Defines a system-wide hot key.
    /// </summary>
    /// <param name="hWnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
    /// <param name="id">The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see Remarks for the action taken.</param>
    /// <param name="fsModifiers">The keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.</param>
    /// <param name="vlc">The virtual-key code of the hot key. See <see href="https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes">Virtual Key Codes.</see></param>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    [DllImport("user32.dll")]
    private static extern bool RegisterHotKey(nint hWnd, int id, FsModifiers fsModifiers, uint vlc);
    /// <summary>
    /// Frees a hot key previously registered by the calling thread.
    /// </summary>
    /// <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.</param>
    /// <param name="id">The identifier of the hot key to be freed.</param>
    /// <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.To get extended error information, call GetLastError.</returns>
    [DllImport("user32.dll")]
    private static extern bool UnregisterHotKey(nint hWnd, int id);
    #pragma warning restore CA5392

    #endregion
}